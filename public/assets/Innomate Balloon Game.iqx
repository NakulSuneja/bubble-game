
											  *Task*
Participants are given 30 (default) balloons. For each balloon they get the choice to pump up the balloon or
collect their winnings. For each successful pump, they can earn money. However, if a balloon pops before 
participants collect their potential winnings, they lose all their potential winnings for the current balloon.



DATA FILE INFORMATION: 
The default data stored in the data files are:

(1) Raw data file: 'BART_raw*.iqdat' (a separate file for each participant)

build:									Inquisit build
computer.platform:						the platform the script was run on
date, time, subject:					date and time script was run with the current subjectnumber 
blockcode, blocknum:					the name and number of the current block
trialcode, trialnum: 					the name and number of the currently recorded trial
											(Note: not all trials that are run might record data) 
ballooncount:							running total of number of balloons
response:								the participant's response 
latency: 								the response latency (in ms)
pumpcount:								number of times the participant presses the pump button for each balloon (resets for each balloon)
pumpresult:								the selected digit from list.pumpresult (1 = balloon explodes)
totalearnings:							currently earned reward up to this point
timebefore1stpump :						latency before 1.pump
timebtwlastpumpandcollect :				latency btw. last pump and collect
timebeforecollectwithoutpump: 			latency before collecting without pumping first
timebtwpumps:							latency between pumps (excluding time before first pump)
sum_timebtwpumps:						sums up the latencies betw. pumps for each balloon
mean_timebtwpumps:						mean time between pumps for each balloon


(2) Summary data file: 'BART_summary*.iqdat' (a separate file for each participant)

script.startdate:						date script was run
script.starttime:						time script was started
script.subjectid:						subject id number
script.elapsedtime:						time it took to run script (in ms)
computer.platform:						the platform the script was run on
/completed:								0 = script was not completed (prematurely aborted); 1 = script was completed (all conditions run)
ballooncount:							running total of number of balloons
->ballooncount_10 etc						->separate measures for the first 10, the second 10, and the last 10 balloons

totalpumpcount:							total number of times the participant presses the pump button across all balloons (includes exploded balloons)
-> pumpcount_10 etc:						->separate measures for the first 10, the second 10, and the last 10 balloons

averagepumpcount:						the mean average pump count (includes exploded balloons)
-> averagepumpcount_10 etc:					->separate measures for the first 10, the second 10, and the last 10 balloons

values.total_explosions :				the number of exploded balloons
-> values.total_explosions_10 etc: 			->separate measures for the first 10, the second 10, and the last 10 balloons

values.nonexplodedballoons : 			the number of balloons out of (default) 30 that did NOT explode
->values.nonexplodedballoons_10 etc:		->separate measures for the first 10, the second 10, and the last 10 balloons

adjustedtotalpumpcount:					sums up the pumps of balloons that did not explode
-> adjustedtotalpumpcount_10 etc.:			->separate measures for the first 10, the second 10, and the last 10 balloons

adjustedaveragepumpcount:				mean number of pumps only of balloons that did not explode (=Dependent Variable)
-> adjustedaveragepumpcount_10 etc:			->separate measures for the first 10, the second 10, and the last 10 balloons


EXPERIMENTAL SET - UP:
* 30 ballons to pump up 
* each (successful) pump increases the possible winnings gained from this balloon
	Determination of Explosionpoints: random for each balloon
	script samples randomly without replacement from a list of numbers 1-128: once the 1 gets sampled, the current balloon pops.
	The probability that the 1 gets sampled increases after each successful pump.

* participant can decide whether to "collect" the winnings or keep pumping to increase the 
reward further. Participants are told that each balloon will explode at some point and that in the
case of an exploding balloon no money will be won from the popped balloon. Further, participants are alerted to 
the fact that some balloons may explode after only 1 pump while others may fill up the entire screen before they explode.
*after 30 balloons have been pumped, the experiment is over, and participants can collect their total winnings

INSTRUCTIONS
Instructions can be easily edited under section EDITABLE INSTRUCTIONS


parameters:

/ totalballoons: 					Number of balloons: Default is 30 
										Note: this script includes summary variables that distinguish between the first 10, the second 10, and the third 10 balloons.

/ pumpvalue: 						Payoff per pump: Default is $.05

/ balloonsizeincrement: 			Ballon size increment in pixels (default: 8pixels)
/ showpumpcount: 					Show current pump count
										true: pump count is shown to participant  (default)
										false: pump count is not shown to participant

/ showballooncount: 				Show current balloon count: 
										true: ballon count is shown to participant  (default)
										false: ballon count is not shown to participant

/ showpotentialearnings: 			Show potential earnings for the current balloon (default)

</usermanual>


**************************************************************************************************************
**************************************************************************************************************
	SET PARAMETERS: 
**************************************************************************************************************
**************************************************************************************************************

<parameters>
/ totalballoons = 30
/ pumpvalue = .05
/ balloonsizeincrement = 8
/ showpumpcount = true
/ showballooncount = true
/ showpotentialearnings = false
</parameters>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE INSTRUCTIONS: change instructions here
**************************************************************************************************************
**************************************************************************************************************

<item instructions>
/ 1 = "In this game, you will see <%parameters.totalballoons%> balloons, one after another.

For each balloon, you can click the pump that will inflate the balloon. Each time you click the pump, the balloon pumps up a little more.

BUT… balloons pop if you pump them up too much. It is up to you to decide how much to pump up each balloon. Some of these balloons might pop after just one pump. Others might not pop until they fill the whole screen.

You get MONEY for every pump. Each pump earns 5 cents. But if a balloon pops, you lose the money you earned on that balloon. To keep the money from a balloon, stop pumping before it pops and click the button labeled 'Collect $$$'."
/ 2 = "Congratulations!

You have earned $<% expressions.totalearnings %>. 

This game is now complete."
</item>

**************************************************************************************************************
**************************************************************************************************************
	DEFAULTS
**************************************************************************************************************
**************************************************************************************************************
script requires Inquisit 5.0.0.0 or higher

<defaults>
/ canvasaspectratio = (4,3)
/ minimumversion = "5.0.0.0"
/ inputdevice = mouse
/ fontstyle = ("Arial", 3.52%, false, false, false, false, 5, 0)
/ txbgcolor = white
/ txcolor = black
</defaults>

**************************************************************************************************************
**************************************************************************************************************
	DATA: this section contains data file information
**************************************************************************************************************
**************************************************************************************************************
*****************
raw data
*****************

<data>
/ columns = (build, computer.platform, date, time, subject, blockcode, blocknum, trialnum, trialcode, values.ballooncount,
				response, latency,
				values.pumpcount, values.pumpresult, values.totalearnings, 
				values.timebefore1stpump, values.timebeforecollectwithoutpump, values.timebtwlastpumpandcollect, 
				values.timebtwpumps, values.mean_timebtwpumps)
/ separatefiles = true
</data>

*******************
summary data
*******************

<summarydata>
/ separatefiles = true
/ columns = (script.startdate, script.starttime, script.subjectid, script.elapsedtime, computer.platform, values.completed,
				values.ballooncount, values.ballooncount_10, values.ballooncount_20, values.ballooncount_30,	
				values.totalpumpcount, values.totalpumpcount_10, values.totalpumpcount_20, values.totalpumpcount_30,
				values.averagepumpcount, values.averagepumpcount_10, values.averagepumpcount_20, values.averagepumpcount_30,
				values.total_explosions, values.total_explosions_10, values.total_explosions_20, values.total_explosions_30,	
				values.nonexplodedballoons, values.nonexplodedballoons_10, values.nonexplodedballoons_20, values.nonexplodedballoons_30,
				values.adjustedtotalpumpcount, values.adjustedtotalpumpcount_10, values.adjustedtotalpumpcount_20, values.adjustedtotalpumpcount_30,
				values.adjustedaveragepumpcount, values.adjustedaveragepumpcount_10, values.adjustedaveragepumpcount_20, values.adjustedaveragepumpcount_30)
</summarydata>

**************************************************************************************************************
**************************************************************************************************************
	VALUES: automatically changed
**************************************************************************************************************
**************************************************************************************************************

completed:									0 = script was not completed; 1 = script was completed (all conditions run)
totalearnings:								currently earned reward
pumpcount:									number of times the participant presses the pump button for each balloon (resets for each balloon)

totalpumpcount:								total number of times the participant presses the pump button across all balloons (includes exploded balloons)
-> pumpcount_10 etc:						->separate measures for the first 10, the second 10, and the last 10 balloons

averagepumpcount:							the mean average pump count (includes exploded balloons)
-> averagepumpcount_10 etc:					->separate measures for the first 10, the second 10, and the last 10 balloons

ballooncount:								running total of number of balloons
->ballooncount_10 etc						->separate measures for the first 10, the second 10, and the last 10 balloons

balloonheight/balloonwidth:					keeps track of balloon size
pumpresult:									the selected digit from list.pumpresult

adjustedtotalpumpcount:						sums up the pumps of balloons that did not explode
-> adjustedtotalpumpcount_10 etc.:			->separate measures for the first 10, the second 10, and the last 10 balloons

adjustedaveragepumpcount:					mean number of pumps only of balloons that did not explode (=Dependent Variable)
-> adjustedaveragepumpcount_10 etc:			->separate measures for the first 10, the second 10, and the last 10 balloons

values.nonexplodedballoons : 				the number of balloons out of (default) 30 that did NOT explode
->values.nonexplodedballoons_10 etc:		->separate measures for the first 10, the second 10, and the last 10 balloons

values.total_explosions :					the number of exploded balloons
-> values.total_explosions_10 etc: 			->separate measures for the first 10, the second 10, and the last 10 balloons

timebefore1stpump :							latency before 1.pump
timebtwlastpumpandcollect :					latency btw. last pump and collect
timebeforecollectwithoutpump: 				latency before collecting without pumping first
timebtwpumps:								latency between pumps (excluding time before first pump)
sum_timebtwpumps:							sums up the latencies betw. pumps for each balloon
mean_timebtwpumps:							mean time between pumps for each balloon

countchoice:								counts the number of trial.choice for each balloon
pumpsound:									1 = make pumpsound; 0 = no pumpsound									

<values>
/ completed = 0
/ totalearnings = 0.0

/ pumpcount = 0
/ totalpumpcount = 0
/ totalpumpcount_10 = 0
/ totalpumpcount_20 = 0
/ totalpumpcount_30 = 0

/ averagepumpcount = 0
/ averagepumpcount_10 = 0
/ averagepumpcount_20 = 0
/ averagepumpcount_30 = 0

/ ballooncount = 0
/ ballooncount_10 = 0
/ ballooncount_20 = 0
/ ballooncount_30 = 0

/ balloonheight = 0 
/ balloonwidth = 0
/ pumpresult = 0

/ adjustedtotalpumpcount = 0
/ adjustedtotalpumpcount_10 = 0
/ adjustedtotalpumpcount_20 = 0
/ adjustedtotalpumpcount_30 = 0

/ adjustedaveragepumpcount = 0
/ adjustedaveragepumpcount_10 = 0
/ adjustedaveragepumpcount_20 = 0
/ adjustedaveragepumpcount_30 = 0

/ nonexplodedballoons = 0
/ nonexplodedballoons_10 = 0
/ nonexplodedballoons_20 = 0
/ nonexplodedballoons_30 = 0

/ total_explosions = 0
/ total_explosions_10 = 0
/ total_explosions_20 = 0
/ total_explosions_30 = 0

/ timebefore1stpump = 0
/ timebtwlastpumpandcollect = 0
/ timebeforecollectwithoutpump = 0
/ timebtwpumps = 0
/ mean_timebtwpumps = 0
/ sum_timebtwpumps = 0

/ countchoice = 0
/ pumpsound = 0
</values>

**************************************************************************************************************
**************************************************************************************************************
	EXPRESSIONS
**************************************************************************************************************
**************************************************************************************************************

<expressions>
/ pumpvalue = format("%.2f", parameters.pumpvalue)
/ totalearnings = format("%.2f", values.totalearnings)
/ potentialearnings = format("%.2f", (list.pumpresult.selectedcount - 1) * parameters.pumpvalue)
</expressions>

************************************
general expressions
************************************
/buttoninstruct: adjusts the instruction text depending on device used to run script

<expressions>
/ buttoninstruct1 = if (computer.touch && !computer.haskeyboard) {"Touch";} else {"Click";}
/ buttoninstruct2 = if (computer.touch && !computer.haskeyboard) {"touch";} else {"click";}
/ buttoninstruct3 = if (computer.touch && !computer.haskeyboard) {"Touching";} else {"Clicking";}
/ buttoninstruct4 = if (computer.touch && !computer.haskeyboard) {"touching";} else {"clicking";}
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	LISTS
**************************************************************************************************************
**************************************************************************************************************
Note: 
* selects with no replacement a digit from 1 to 128
* with each selection the likelihood to sample the "1" increases slightly
* If "1" is sampled -> balloon pops

<list pumpresult>
/ items = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
121, 122, 123, 124, 125, 126, 127, 128)
/ replace = false
</list>


**************************************************************************************************************
**************************************************************************************************************
	INSTRUCTION ELEMENTS
**************************************************************************************************************
**************************************************************************************************************

<text instructionsheader>
/ items = ("Instructions:")
/ vjustify = center
/ hjustify = left
/ size = (80%, 5%)
/ fontstyle = ("Arial", 4%, true, false, false, false, 5, 0)
/ position = (50%, 8%)
</text>

<text instructions>
/ items = instructions
/ vjustify = center
/ hjustify = left
/ size = (80%, 80%)
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ select = sequence
/ resetinterval = 0
/ position = (50%, 32.3%)
</text>

<text aimheader>
/ items = ("Your aim:")
/ vjustify = center
/ hjustify = left
/ size = (80%, 5%)
/ fontstyle = ("Arial", 3.2%, true, false, false, false, 5, 0)
/ position = (50%, 65%)
</text>

<text aimtext>
/ items = ("Your goal is to collect as much money as possible.")
/ vjustify = center
/ hjustify = left
/ size = (80%, 10%)
/ position = (50%, 70%)
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
</text>


<text continuebutton>
/ items = ("Click to continue")
/ fontstyle = ("Arial", 2.5%, false, false, false, false, 5, 1)
/ size = (20%, 5%)
/ position = (80%, 90%)
/ txbgcolor = black
/ txcolor = white
/ vjustify = center
</text>

<text summarytext>
/ items = instructions
/ vjustify = center
/ hjustify = left
/ size = (80%, 80%)
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 0)
/ select = 2
/ resetinterval = 0
/ position = (50%, 33%)
</text>


<trial instructions>
/ stimulustimes = [1=instructions, instructionsheader, aimtext, aimheader, continuebutton]
/ inputdevice = mouse
/ validresponse = (continuebutton)
/ recorddata = false
</trial>

<trial summarypage>
/ stimulustimes = [1=summarytext, continuebutton]
/ inputdevice = mouse
/ validresponse = (continuebutton)
/ recorddata = false
</trial>

**************************************************************************************************************
**************************************************************************************************************
	STIMULI
**************************************************************************************************************
**************************************************************************************************************

<picture collectbutton>
/ items = ("collectbutton.jpg")
/ position = (60%, 85%)
/ valign = top
/ halign = left
/ erase = false
/ size = (25%, 10%)
</picture>

<picture collectbuttonselected>
/ items = ("collectbuttonselected.jpg")
/ position = (60%, 85%)
/ valign = top
/ halign = left
/ erase = false
/ size = (25%, 10%)
</picture>

<text totalearnings>
/ items = ("Total Winnings: $<%expressions.totalearnings%>          ")
/ position = (60%, 82%)
/ valign = bottom
/ halign = left
/ erase = false
</text>

<text pumpcount>
/ items = ("Number of pumps: <%values.pumpcount%>          ")
/ position = (60%, 70%)
/ valign = bottom
/ halign = left
/ erase = false
</text>

<text balloonvalue>
/ items = ("Money for this balloon: $<% format(~"%.2f~", values.pumpcount * parameters.pumpvalue) %>          ")
/ position = (60%, 76%)
/ valign = bottom
/ halign = left
/ erase = false
</text>

<text ballooncount>
/ items = ("Balloon number: <%values.ballooncount%> of <%parameters.totalballoons%>         ")
/ position = (60%, 64%)
/ valign = bottom
/ halign = left
/ erase = false
</text>

<text potentialearnings>
/ items = ("Potential earnings: $<%expressions.potentialearnings%>          ")
/ position = (60%, 58%)
/ valign = bottom
/ halign = left
/ erase = false
</text>


<picture pumpbutton>
/ items = ("grip1.png")
/ position = (33.5%, 82%)
/ valign = top
/ erase = false
/ size = (30%, 15%)
</picture>

<picture pumpbuttonselected>
/ items = ("grip2.png")
/ position = (33.5%, 82%)
/ valign = top
/ erase = false
/ size = (30%, 15%)
</picture>

<picture balloon>
/ items = ("balloon.png")
/ position = (33%, 83%)
/ valign = bottom
/ size = (100%, 100%)
/ erase = false
</picture>

<picture poppedballoon>
/ items = ("poppedballoon.png")
/ position = (33%, 83%)
/ valign = bottom
/ size = (100%, 100%)
/ erase = false
</picture>

<shape blank>
/ shape = rectangle
/ color = white
/ size = (100%, 100%)
/ position = (33%, 83%)
/ valign = bottom
</shape>

<sound popsound>
/ items = ("explosion.wav")
</sound>

<sound collectsound>
/ items = ("casino.wav")
</sound>

<sound inflatesound>
/ items = ("inflate.wav")
/ playthrough = false
</sound>

**************************************************************************************************************
**************************************************************************************************************
	PUMP TRIALS
**************************************************************************************************************
**************************************************************************************************************

<trial init>
/ ontrialbegin = [
	picture.balloon.width = values.balloonwidth;
	picture.balloon.height = values.balloonheight;
	picture.poppedballoon.width = values.balloonwidth;
	picture.poppedballoon.height = values.balloonheight;
	values.pumpcount = 0;
	values.timebefore1stpump  = 0;
	values.timebeforecollectwithoutpump = 0;
	values.timebtwlastpumpandcollect =0;
	values.timebtwpumps = 0;
	values.sum_timebtwpumps = 0;
	values.mean_timebtwpumps = 0;
	values.countchoice = 0;
]
/ stimulustimes = [1=blank]
/ response = noresponse
/ ontrialend = [
	if (trial.init.trialcount <= parameters.totalballoons) {
		values.ballooncount += 1;
		if (values.ballooncount < 11) {
			values.ballooncount_10 += 1;
		} else if (values.ballooncount <21) {
			values.ballooncount_20 += 1;
		} else if (values.ballooncount <31) {
			values.ballooncount_30 += 1;
		}
		;
	}
	;
	shape.blank.width = values.balloonwidth;
	shape.blank.height = values.balloonheight;
]
/ branch = [trial.choice]
/ recorddata = false
</trial>

<trial choice>
/ ontrialbegin = [
	values.countchoice += 1;
	values.pumpresult = list.pumpresult.nextvalue;
	if (values.pumpsound == 1)
		trial.choice.insertstimulustime(sound.inflatesound,0);
	if (trial.choice.response == "pumpbutton")
		trial.choice.insertstimulustime(picture.pumpbuttonselected,0);
	trial.choice.insertstimulustime(picture.pumpbutton,50);
	values.pumpsound = 0;
]
/ stimulustimes = [1=collectbutton, balloon, pumpbutton, totalearnings, pumpcount, potentialearnings, ballooncount, balloonvalue]
/ inputdevice = mouse
/ validresponse = (collectbutton, pumpbutton)
/ monkeyresponse = ("collectbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", 
                    "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton", "pumpbutton")
/ ontrialend = [
	trial.choice.resetstimulusframes();
	if (trial.choice.response == "pumpbutton") {
		picture.balloon.width += parameters.balloonsizeincrement;
		picture.balloon.height += parameters.balloonsizeincrement;
		shape.blank.width = picture.balloon.width;
		shape.blank.height = picture.balloon.height;
		values.pumpcount += 1;
		if (values.pumpcount > 1) {
			values.mean_timebtwpumps = values.sum_timebtwpumps / (values.pumpcount-1);
		};
		values.totalpumpcount += 1;
		if (values.ballooncount < 11) {
			values.totalpumpcount_10 += 1;
		} else if (values.ballooncount <21) {
			values.totalpumpcount_20 += 1;
		} else if (values.ballooncount <31) {
			values.totalpumpcount_30 += 1;
		}
		;
		if (values.countchoice == 1) {
			values.timebefore1stpump = trial.choice.latency;
		} else {
			values.timebtwpumps = trial.choice.latency;
			values.sum_timebtwpumps += values.timebtwpumps;
		};
	} else if (trial.choice.response == "collectbutton") {
		if (values.countchoice == 1) {
			values.timebeforecollectwithoutpump =  trial.choice.latency;
		} else {
			values.timebtwlastpumpandcollect =  trial.choice.latency;
		}
	}
	;
]	
/ branch = [
	if (trial.choice.response == "pumpbutton") {
		if (values.pumpresult == 1) {
			trial.pop;
		} else {
			values.pumpsound = 1;
			trial.choice;
		}
	} else if (trial.choice.response == "collectbutton") {
		trial.collect;
	}
	;
]	
/ recorddata = true
</trial>


<trial pop>
/ ontrialbegin = [
	values.total_explosions += 1;
	if (values.ballooncount < 11)
		values.total_explosions_10 += 1
	else if (values.ballooncount <21 )
		values.total_explosions_20 += 1
	else if (values.ballooncount <31 )
		values.total_explosions_30 += 1
	;
	picture.poppedballoon.width = picture.balloon.width;
	picture.poppedballoon.height = picture.balloon.height;
	shape.blank.width = picture.balloon.width;
	shape.blank.height = picture.balloon.height;
	list.pumpresult.reset();
]
/ stimulustimes = [1=popsound, poppedballoon, totalearnings]
/ response = noresponse
/ responseinterrupt = trial
/ ontrialend = [
	values.averagepumpcount = values.totalpumpcount/values.ballooncount;
	if (values.ballooncount < 11)
		values.averagepumpcount_10 = values.totalpumpcount_10/values.ballooncount_10
	else if (values.ballooncount <21 )
		values.averagepumpcount_20 = values.totalpumpcount_20/values.ballooncount_20
	else if (values.ballooncount <31 )
		values.averagepumpcount_30 = values.totalpumpcount_30/values.ballooncount_30
	;
]
/ branch = [trial.init]
</trial>

<trial collect>
/ ontrialbegin = [
	values.nonexplodedballoons +=  1;
	if (values.ballooncount < 11)
		values.nonexplodedballoons_10 += 1
	else if (values.ballooncount <21 )
		values.nonexplodedballoons_20 += 1
	else if (values.ballooncount > 20 && values.ballooncount <31 )
		values.nonexplodedballoons_30 += 1
	;
	shape.blank.width = picture.balloon.width;
	shape.blank.height = picture.balloon.height;
	values.totalearnings = values.totalearnings + (values.pumpcount * parameters.pumpvalue);
	list.pumpresult.reset();
]
/ stimulustimes = [1=collectsound, collectbuttonselected, totalearnings; 100 = collectbutton]
/ response = noresponse
/ responseinterrupt = trial
/ ontrialend = [
	values.averagepumpcount = values.totalpumpcount/values.ballooncount;
	if (values.ballooncount < 11)
		values.averagepumpcount_10 = values.totalpumpcount_10/values.ballooncount_10
	else if (values.ballooncount <21 )
		values.averagepumpcount_20 = values.totalpumpcount_20/values.ballooncount_20
	else if (values.ballooncount <31 )
		values.averagepumpcount_30 = values.totalpumpcount_30/values.ballooncount_30
	;
	values.adjustedtotalpumpcount += values.pumpcount;
	if (values.ballooncount < 11)
		values.adjustedtotalpumpcount_10 += values.pumpcount
	else if (values.ballooncount <21 )
		values.adjustedtotalpumpcount_20 += values.pumpcount
	else if (values.ballooncount <31 )
		values.adjustedtotalpumpcount_30 += values.pumpcount
	;
	values.adjustedaveragepumpcount = values.adjustedtotalpumpcount / values.nonexplodedballoons;
	if (values.ballooncount < 11)
		values.adjustedaveragepumpcount_10 = values.adjustedtotalpumpcount_10 / values.nonexplodedballoons_10
	else if (values.ballooncount <21 )
		values.adjustedaveragepumpcount_20 = values.adjustedtotalpumpcount_20 / values.nonexplodedballoons_20
	else if (values.ballooncount <31 )
		values.adjustedaveragepumpcount_30 = values.adjustedtotalpumpcount_30 / values.nonexplodedballoons_30
	;
]	
/ branch = [trial.init]
</trial>

**************************************************************************************************************
**************************************************************************************************************
	BLOCKS
**************************************************************************************************************
**************************************************************************************************************
<block BART>
/ onblockbegin = [
	values.balloonwidth = 0.3 * display.width;
	values.balloonheight = 0.3 * display.height;
]
/ trials = [1=instructions; 2=init]
/ stop = [trial.init.trialcount > parameters.totalballoons]
/ bgstim = (quittext)
</block>

<block summary>
/ trials = [1=summarypage]
</block>

**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENTS
**************************************************************************************************************
**************************************************************************************************************

<expt BART>
/ onexptbegin = [
	if ( !parameters.showpumpcount )
		text.pumpcount.hposition = 100%;
	if ( !parameters.showballooncount )
		text.ballooncount.hposition = 100%;
	if ( !parameters.showpotentialearnings )
		text.potentialearnings.hposition = 100%;
]	
/ blocks = [
	1=BART; 
	2=summary;
]
/ onexptend = [values.completed = 1]
</expt>

<text quittext>
/ items = ("Press Ctrl + Q to quit")
/ vjustify = center
/ hjustify = left
/ size = (15%, 3%)
/ fontstyle = ("Arial", 2%, false, false, false, false, 5, 0)
/ position = (92.5%, 95%)
/ txcolor = darkgrey
/ erase = false
</text>

**************************************************************************************************************
												End of File
**************************************************************************************************************